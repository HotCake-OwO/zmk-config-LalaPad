#include <input/processors.dtsi>
#include <input/processors/report_rate_limit.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// jp key layout

#define JP_YEN          0x89              // Â¥
#define JP_PIPE         LS(0x89)          // |
#define JP_UNDERSCORE   LS(0x87)          // _

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_report_rate_limit 9>,
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        // <&zip_xy_scaler 2 1>,,,,,,,,,,,
        // <&zip_temp_layer MOUSE_R_LAYER 500>;,,,,,,,,,,
        <&zip_xy_scaler 9 4>;

    //    lowspeedmode {
    //        layers = <SECONDARY_LAYER>;
    //        input-processors =
    //            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
    //            // <&zip_xy_scaler 3 4>,,
    //            // <&zip_temp_layer MOUSE_R_LAYER 500>;,
    //            <&zip_xy_scaler 3 4>;
    //    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            // <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,,,,,,,,,,,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT)>,
            <&zip_scroll_scaler 1 8>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_report_rate_limit 9>,
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        // <&zip_xy_scaler 2 1>,,,,,,,,,,,
        // <&zip_temp_layer MOUSE_L_LAYER 500>;,,,,,,,,,,
        <&zip_xy_scaler 9 4>;

    //    lowspeedmode {
    //        layers = <SECONDARY_LAYER>;
    //        input-processors =
    //            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
    //            // <&zip_xy_scaler 3 4>,,
    //            // <&zip_temp_layer MOUSE_L_LAYER 500>;,
    //            <&zip_xy_scaler 3 4>;
    //    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            // <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,,,,,,,,,,,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT)>,
            <&zip_scroll_scaler 1 6>;
    };
};

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: sensor_scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
            label = "SCROLL_UP_DOWN";
        };

        scroll_down_up: sensor_scroll_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
            label = "SCROLL_DOWN_UP";
        };

        scroll_left_right: sensor_scroll_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
            label = "SCROLL_LEFT_RIGHT";
        };

        scroll_right_left: sensor_scroll_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
            label = "SCROLL_RIGHT_LEFT";
        };

        volume_up_down: sensor_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
            label = "VOLUME_UP_DOWN";
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "DOT_COMMA";
        };

        pls_minus: pls_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "PLS_MINUS";
        };

        allow_pageup: allow_pageup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp PAGE_UP>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEUP";
        };

        allow_pagedown: allow_pagedown {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEDOWN";
        };

        allow_home: allow_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp HOME>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_HOME";
        };

        allow_end: allow_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp END>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_END";
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        volume_down_up: volume_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_DOWN>, <&kp C_VOLUME_UP>;

            tap-ms = <20>;
            label = "VOLUME_DOWN_UP";
        };
    };

    combos {
        compatible = "zmk,combos";

        ctrl+alt+delete {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <45 46 47>;
            timeout-ms = <3000>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_down_up>, <&volume_down_up>;

            bindings = <
&kp TAB         &kp Q         &kp W         &kp E            &kp R        &kp T                  &kp Y          &kp U        &kp I            &kp O       &kp P      &kp BACKSPACE
&kp LCTRL       &kp A         &kp S         &kp D            &kp F        &kp G                  &kp H          &kp J        &lt 5 K          &kp L       &kp SEMI   &lt 4 ENTER
&kp LEFT_SHIFT  &kp Z         &kp X         &kp C            &kp V        &kp B                  &kp N          &kp M        &kp COMMA        &kp PERIOD  &kp SLASH  &kp JP_YEN
&none           &kp LEFT_WIN  &kp LEFT_ALT  &lt 3 SPACE      &kp GRAVE    &lt 8 LA(PRINTSCREEN)  &kp C_MUTE     &lt 2 GRAVE  &lt 1 SPACE      &kp LEFT    &kp DOWN   &kp RIGHT
                              &allow_end    &allow_pagedown  &allow_home  &allow_pageup          &allow_pageup  &allow_home  &allow_pagedown  &allow_end
            >;
        };

        symbol_LAYER {
            display-name = "secondary_layer";
            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;

            bindings = <
&kp ESCAPE  &kp EXCLAMATION  &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT      &kp CARET       &kp AMPERSAND   &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp MINUS         &kp EQUAL
&trans      &kp NUMBER_6     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW       &kp RIGHT_ARROW       &kp HOME          &kp END
&trans      &trans           &trans        &trans        &trans        &trans           &kp DELETE      &none           &kp RIGHT_BRACKET  &kp BACKSLASH         &kp LEFT_BRACKET  &kp JP_PIPE
&trans      &trans           &trans        &trans        &trans        &kp PRINTSCREEN  &trans          &none           &trans             &kp KP_NUMBER_0       &dot_comma        &kp KP_ENTER
                             &trans        &trans        &trans        &trans           &trans          &trans          &trans             &trans
            >;
        };

        numpad_LAYER {
            display-name = "numpad_LAYER";
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &trans            &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &none
&trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &kp SINGLE_QUOTE  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none         &none
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &kp NUMBER_0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none         &none
&trans  &trans   &trans   &trans   &trans   &trans   &kp NUMBER_0      &trans        &none         &none         &none         &none
                 &trans   &trans   &trans   &trans   &trans            &trans        &trans        &trans
            >;
        };

        mouse_LAYER {
            display-name = "system_layer";
            sensor-bindings = <&scroll_down_up>, <&volume_up_down>;

            bindings = <
&kp ESCAPE  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6              &kp F7           &kp F8       &kp F9               &kp F10   &kp F11
&trans      &trans  &trans  &trans  &none   &none   &kp LA(LEFT_ARROW)  &mkp LCLK        &mkp RCLK    &kp LA(RIGHT_ARROW)  &kp HOME  &kp F12
&trans      &trans  &trans  &trans  &trans  &trans  &kp F5              &kp LG(TAB)      &mkp MCLK    &trans               &trans    &trans
&trans      &trans  &trans  &trans  &trans  &trans  &trans              &kp LS(LC(TAB))  &kp LC(TAB)  &trans               &trans    &trans
                    &trans  &trans  &trans  &trans  &trans              &trans           &trans       &trans
            >;
        };

        MOUSE_v2_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp ESCAPE          &kp LC(T)        &kp LC(LS(T))  &trans               &kp LC(W)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LEFT_ARROW)  &mkp LCLK        &mkp RCLK      &kp LA(RIGHT_ARROW)  &none      &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp F5              &kp LG(TAB)      &mkp MCLK      &kp ESCAPE           &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans              &kp LS(LC(TAB))  &kp LC(TAB)    &trans               &trans     &trans
                &trans  &trans  &trans  &trans  &trans              &trans           &trans         &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LCTRL  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans
            >;
        };

        UNUSED-MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans  &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&mo 7   &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &mkp MB5   &mkp MB4   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                   &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        UNUSED-SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        BT_LAYER {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans
            >;
        };

        SHIFT_LAYER {
            display-name = "SHIFT_LAYER";
            bindings = <
&kp TAB         &kp LS(Q)     &kp LS(W)     &kp LS(E)        &kp LS(R)     &kp LS(T)              &kp LS(Y)      &kp LS(U)    &kp LS(I)        &kp LS(O)       &kp LS(P)      &kp BACKSPACE
&kp LCTRL       &kp LS(A)     &kp LS(S)     &kp LS(D)        &kp LS(F)     &kp LS(G)              &kp LS(H)      &kp LS(J)    &kp LS(K)        &kp LS(L)       &kp SEMI       &lt 4 ENTER
&kp LEFT_SHIFT  &kp LS(Z)     &kp LS(X)     &kp LS(C)        &kp LS(V)     &kp LS(B)              &kp LS(N)      &kp LS(M)    &kp LS(COMMA)    &kp LS(PERIOD)  &kp LS(SLASH)  &kp JP_UNDERSCORE
&none           &kp LEFT_WIN  &kp LEFT_ALT  &lt 3 SPACE      &kp LEFT_WIN  &lt 8 LA(PRINTSCREEN)  &kp C_MUTE     &lt 2 GRAVE  &lt 1 SPACE      &kp LEFT        &kp DOWN       &kp RIGHT
                              &allow_end    &allow_pagedown  &allow_home   &allow_pageup          &allow_pageup  &allow_home  &allow_pagedown  &allow_end
            >;

            sensor-bindings = <&scroll_down_up>, <&volume_down_up>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        shift_simbolLayer {
            if-layers = <9 1>;
            then-layer = <1>;
        };
    };
};
